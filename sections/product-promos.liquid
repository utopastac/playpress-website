{% comment %} {{ 'sort_collections.js' | asset_url | script_tag }} {% endcomment %}
{{ 'product-promos.css' | asset_url | stylesheet_tag }}

<section is="section">
  
  {% render 'section-header', title: section.settings.title, text: section.settings.text %}

  {%- assign collection = collections[section.settings.collection] -%}

  {% if section.settings.show_sorting_options %}
    <div class="product-sorting">
      <select id="sort-by" class="sort-by-select">
        <option value="created-descending">Newest</option>
        <option value="created-ascending">Oldest</option>
        <option value="price-ascending">Price: Low to High</option>
        <option value="price-descending">Price: High to Low</option>
        <option value="title-ascending">Alphabetical: A-Z</option>
        <option value="title-descending">Alphabetical: Z-A</option>
      </select>
    </div>
  {% endif %}

  {% assign products = collection.products %}

  {%- assign product_limit = section.settings.grid | times: section.settings.rows -%}

  <div is="product-promos" class="product-promos-container">
    <div class="product-grid">
      {% for product in products limit: product_limit %}
        {%- if product.available -%}
          {% render 'product-promo', product: product %}
        {%- endif -%}
      {% endfor %}
    </div>
  </div>

  {% render 'signpost', section: section, button: true, center: true %}

</section>

<style>
  .product-sorting {
    margin-bottom: 2rem;
    text-align: right;
  }
  
  .sort-by-select {
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    cursor: pointer;
  }

  .product-promos-container {
    position: relative;
  }

  .product-promos-container.loading {
    opacity: 0.5;
    pointer-events: none;
  }

  .product-promos-container.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 30px;
    height: 30px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const sortSelect = document.getElementById('sort-by');
    
    if (!sortSelect) {
      return;
    }

    const productPromos = document.querySelector('.product-promos-container');
    const productGrid = productPromos.querySelector('.product-grid');
    
    if (!productPromos || !productGrid) {
      return;
    }
    
    // Store all products in memory
    const products = Array.from(productGrid.children).map(product => ({
      element: product,
      title: product.querySelector('.product-title')?.textContent?.toLowerCase() || '',
      price: parseFloat(product.querySelector('.product-price')?.dataset.price || '0'),
      date: new Date(product.dataset.date || '1970-01-01')
    }));

    // Handle sort change
    sortSelect.addEventListener('change', function() {
      const sortBy = this.value;
      
      // Add loading state
      productPromos.classList.add('loading');
      
      // Sort products based on selection
      const sortedProducts = [...products].sort((a, b) => {
        switch(sortBy) {
          case 'title-ascending':
            return a.title.localeCompare(b.title);
          case 'title-descending':
            return b.title.localeCompare(a.title);
          case 'price-ascending':
            return a.price - b.price;
          case 'price-descending':
            return b.price - a.price;
          case 'created-descending':
            return b.date - a.date;
          case 'created-ascending':
            return a.date - b.date;
          default:
            return 0;
        }
      });

      // Clear the grid
      productGrid.innerHTML = '';
      
      // Add sorted products back to the grid
      sortedProducts.forEach(product => {
        productGrid.appendChild(product.element);
      });

      // Remove loading state
      productPromos.classList.remove('loading');
    });

    // Set initial sort to newest and trigger the change event
    sortSelect.value = 'created-descending';
    sortSelect.dispatchEvent(new Event('change'));
  });
</script>

{% schema %}
{
  "name": "Product promos",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Add a title"
    },
    {
      "type": "textarea",
      "id": "text",
      "label": "Text",
      "info": "Optional"
    },
    {
      "id": "collection",
      "type": "collection",
      "label": "Collection"
    },
    {
      "type": "range",
      "id": "grid",
      "label": "Products per row",
      "min": 2,
      "max": 5,
      "step": 1,
      "default": 3
    },
    {
      "type": "range",
      "id": "rows",
      "label": "Rows",
      "min": 1,
      "max": 20,
      "step": 1,
      "default": 2
    },
    {
      "type": "checkbox",
      "id": "show_signpost_link",
      "label": "Show 'View all' link",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_sorting_options",
      "label": "Show Sort options",
      "default": false
    },
    {
      "type": "text",
      "id": "link_text",
      "label": "Link text",
      "default": "View all"
    },
    {
      "type": "url",
      "id": "link_url",
      "label": "Link URL"
    }
  ],
  "presets": [
    {
      "name": "Product promos"
    }
  ]
}
{% endschema %}
